import os
import sys
import tkinter as tk

from tkinter import ttk
import sv_ttk
import patient.core_functions as cf
from tkinter import messagebox

sys.path.append(os.path.abspath('.'))
def validate_login(username,passwrd):
    auth = 0
    priviledge = 0

    cnx = cf.databaseConnect()
    cursor = cnx.cursor()
    user = username
    passwd = passwrd

    statement1 = "select * from users;"
    cursor.execute(statement1)
    allowedUsers = cursor.fetchall()

    for i in range(len(allowedUsers)):
        if user == allowedUsers[i][0] and passwd == allowedUsers[i][1]:
            print("Successfully logged in\n")
            auth = 1
            priviledge = int(allowedUsers[i][2])
            break
        else:
            print("User_ID and password do not match.")
            break

    cnx.commit()
    cnx.close()

    return auth, priviledge



header_values = []


def add_to_db(table, header_values):
    content = cf.get_input_fields("{}".format(table))
    print(content)
    columns = []
    values = []

    for i in range(len(content)):
        if content[i][0] == "updatetime":
            break
        else:
            columns.append(content[i][0])

    for i in header_values:
        a = i.get()
        values.append(a)


    del columns[0]  #removing ID entry as it is autogenerated in db
    del values[0]

    cf.add(table,columns, values)
    messagebox.showinfo("Information", "Entry Added to DB!")

def edit_to_db(table, header_values):
    content = cf.get_input_fields("{}".format(table))
    print(content)
    columns = []
    values = []

    for i in range(len(content)):
        if content[i][0] == "updatetime":
            break
        else:
            columns.append(content[i][0])

    for i in header_values:
        a = i.get()
        values.append(a)

    cf.edit(table, columns, values)
    messagebox.showinfo("Information", "Entry Editted in DB!")

def delete_in_db(table,column , value):
    cf.delete(table, column, value)
    messagebox.showinfo("Information", "Entry Deleted in DB!")


def gui_construct(frame,table,parent, priority=0):

    selected = tk.IntVar(frame)
    r1 = ttk.Radiobutton(frame, text='Add {}'.format(table), variable=selected, value=1)
    r1.grid(column=2, row=1, padx=5, pady=5)
    if priority == 0:
        r2 = ttk.Radiobutton(frame, text='Edit', variable=selected, value=2)
        r2.grid(column=3, row=1, padx=5, pady=5)
    r3 = ttk.Radiobutton(frame, text='Delete', variable=selected, value=3)
    r3.grid(column=4, row=1, padx=5, pady=5)

    frame.wait_variable(selected)

    if selected.get() == 1:

        #patient_frame = ttk.Frame(patientModule)
        content = cf.get_input_fields("{}".format(table))
        print(content)

        header_labels = []
        header_values = []

        field_labels = ttk.Label(frame, text="Enter the new {} data: ".format(table))
        field_labels.grid(column = 2, row = 1,padx=25, pady=10)

        for i in range(len(content)):
            if content[i][0] == "updatetime":
                break
            else:

                field_labels = ttk.Label(frame, text="Enter {}:".format(content[i][0]))
                field_labels.grid(column = 1, row = (2*i),padx=25, pady=0)
                header_labels.append(field_labels)

                field_values= ttk.Entry(frame)
                field_values.grid(column =1 , row=(2*i + 1) ,padx=25, pady=10)
                header_values.append(field_values)



        print(header_values)
        print(header_labels)
        patient_add_button = ttk.Button(frame, text="Add {}".format(table), command=lambda : add_to_db("{}".format(table), header_values))
        patient_add_button.grid(column = 2, padx=25, pady=15)


    elif selected.get() == 2 and priority == 0:

        content = cf.get_input_fields("{}".format(table))
        print(content)

        header_labels = []
        header_values = []

        field_labels = ttk.Label(frame, text="Enter the {}_ID and its new data: ".format(table))
        field_labels.grid(column = 2, row = 1,padx=25, pady=10)

        for i in range(len(content)):
            if content[i][0] == "updatetime":
                break
            else:

                field_labels = ttk.Label(frame, text="Enter {}:".format(content[i][0]))
                field_labels.grid(column = 1, row = (2*i),padx=25, pady=0)
                header_labels.append(field_labels)

                field_values = ttk.Entry(frame)
                field_values.grid(column =1 , row=(2*i + 1) ,padx=25, pady=10)
                header_values.append(field_values)


        print(header_values)
        print(header_labels)
        hospital_add_button = ttk.Button(frame, text="Update {}".format(table),
                                        command=lambda: edit_to_db("{}".format(table), header_values))
        hospital_add_button.grid(column = 2, padx=25, pady=15)


    elif selected.get() == 3:
        content = cf.get_input_fields("{}".format(table))
        field_labels = ttk.Label(frame, text="Enter {} you want to delete:".format(content[0][0]))
        field_labels.grid(column = 1, row = 1,padx=25, pady=10)

        field_values = ttk.Entry(frame)
        field_values.grid(column = 1, row = 2,padx=25, pady=10)
        column = content[0][0]
        value = field_values.get()
        delete_button = ttk.Button(frame, text="Delete {}".format(table),
                                        command=lambda: delete_in_db(table, column, value))
        delete_button.grid(column = 1, row = 3,padx=25, pady=10)



    sv_ttk.set_theme("light")



    return frame


def patient_gui_functions():


    def task():
        nonlocal patient_frame
        patient_frame.destroy()
        patient_frame = ttk.Frame(patientModule)
        patient_frame.grid()


    patientModule = tk.Tk()

    patient_frame = ttk.Frame(patientModule)
    patient_frame.grid(padx= 10, pady=10)
    sv_ttk.set_theme("light")



    gui_construct(patient_frame,"patients", patientModule)
    sv_ttk.set_theme("light")

    patientModule.mainloop()

def doctor_gui_functions():


    def task():
        nonlocal doctors_frame
        doctors_frame.destroy()
        doctors_frame = ttk.Frame(doctorModule)
        doctors_frame.grid()


    doctorModule = tk.Tk()

    doctors_frame = ttk.Frame(doctorModule)
    doctors_frame.grid(padx= 10, pady=10)




    gui_construct(doctors_frame,"doctors", doctorModule)
    sv_ttk.set_theme("light")

    doctorModule.mainloop()

def inventory_gui_functions():

    def task():
        nonlocal inventory_frame
        inventory_frame.destroy()
        inventory_frame = ttk.Frame(inventoryModule)
        inventory_frame.grid()


    inventoryModule = tk.Tk()

    inventory_frame = ttk.Frame(inventoryModule)
    inventory_frame.grid(padx= 10, pady=10)

    selected = tk.IntVar(inventoryModule)
    r1 = ttk.Radiobutton(inventory_frame, text='Inventory', variable=selected, value=1, command=task)
    r2 = ttk.Radiobutton(inventory_frame, text='Supplier', variable=selected, value=2, command=task)

    r1.grid(column=1, row=1, padx=5, pady=5)
    r2.grid(column=1, row=2, padx=5, pady=5)
    sv_ttk.set_theme("light")

    inventoryModule.wait_variable(selected)

    if selected.get() == 1:
        gui_construct(inventory_frame,"inventory", inventoryModule)

    elif selected.get() == 2:
        gui_construct(inventory_frame,"supplier", inventoryModule)
    sv_ttk.set_theme("light")

    inventoryModule.mainloop()

def billing_gui_functions():
    def task():
        nonlocal billing_frame
        billing_frame.destroy()
        billing_frame = ttk.Frame(billingModule)
        billing_frame.grid()

    billingModule = tk.Tk()

    billing_frame = ttk.Frame(billingModule)
    billing_frame.grid(padx=10, pady=10)

    gui_construct(billing_frame, "billing", billingModule,1)
    sv_ttk.set_theme("light")

    billingModule.mainloop()

def appoinment_gui_functions():
    def task():
        nonlocal appoinment_frame
        appoinment_frame.destroy()
        appoinment_frame = ttk.Frame(appoinmentModule)
        appoinment_frame.grid()


    appoinmentModule = tk.Tk()

    appoinment_frame = ttk.Frame(appoinmentModule)
    appoinment_frame.grid(padx= 10, pady=10)
    sv_ttk.set_theme("light")



    gui_construct(appoinment_frame,"appoinments", appoinmentModule)
    sv_ttk.set_theme("light")

    appoinmentModule.mainloop()


def create_add_edit_delete_label(frame, menu, authuserWindow):

    frame.destroy()
    frame = ttk.Frame(authuserWindow)
    frame.grid()
    if menu.get() == "billing":
        gui_construct(frame,menu.get(), authuserWindow, 1)

    else:
        gui_construct(frame, menu.get(), authuserWindow)


def logged_in():
    results = []
    def search_clicked(window,menu, column, userinput):

        result_labels=[]
        print(userinput + "hello")
        results.clear()
        result = cf.search(menu, column, userinput)
        for i in range(len(result)):

            results.append(result[i])
        print(results)
        search_result = ttk.Frame(window)
        search_result.grid(column=0, row=10)

        for i in range(len(results)):

            result_labels.append(ttk.Label(search_result, text=str(results[i])))
            result_labels[i].grid(column=0, row=i, padx=5, pady=5)


    def search_window():



        def search_selected(menu):
            nonlocal search_window1
            list = []
            columnnames = cf.get_input_fields(menu)
            for i in range(len(columnnames)):
                list.append(columnnames[i][0])
            print(list)
            searchbutton1.grid_forget()
            searchbutton1.destroy()


            column = tk.StringVar(search_window1)
            column.set("Select a Column")
            search_columns = tk.OptionMenu(search_window1, column, *list)
            search_columns.grid(column=1, row=5)
            searchentry = ttk.Entry(search_window1)
            searchentry.grid(column=0, columnspan=4, row=7)


            userinput = searchentry.get()
            print(userinput)
            print(menu)

            searchbox_result = ttk.Frame(search_window1)
            searchbox_result.grid(column=0, row=9)
            search_window1.wait_variable(column)
            searchbutton2 = ttk.Button(search_window1, text="Search", command=lambda : search_clicked(search_window1,menu,column.get(),searchentry.get()))
            searchbutton2.grid(column=0, row=5)



        search_window1 = tk.Tk()
        menu = tk.StringVar(search_window1)
        menu.set("Select a Table")

        # getting tables
        tables = ["analytics", "appoinments", "billing", "doctors", "inventory", "medical_records", "patients",
                  "quality", "supplier", "training"]

        print(tables)

        # Create a dropdown Menu
        drop = tk.OptionMenu(search_window1, menu, *tables)
        drop.grid(column=1, row=1, padx=5, pady=5)
        searchbutton1 = ttk.Button(search_window1, text="Search",
                                  command=lambda : search_selected(menu.get()))
        searchbutton1.grid(column=0, row=5)
        search_window1.mainloop()

    def create_add_edit_delete_label(menu, authuserWindow):

        nonlocal searchoptions
        searchoptions.grid_forget()
        searchoptions.destroy()
        searchoptions = ttk.Frame(authuserWindow)
        searchoptions.grid(column=1, row=0)

        if menu.get() == "billing":

            gui_construct(searchoptions, menu.get(), authuserWindow, 1)

        else:
            gui_construct(searchoptions, menu.get(), authuserWindow)



    authuserWindow = tk.Tk()

    searchconsole = ttk.Frame(authuserWindow)
    searchconsole.grid(column = 0,row =0)

    searchoptions = ttk.Frame(authuserWindow)
    searchoptions.grid(column = 1, row=0)

    # Set the Menu initially
    menu = tk.StringVar(authuserWindow)
    menu.set("Select a Table")

    #getting tables
    tables = ["analytics","appoinments","billing","doctors","inventory","medical_records","patients","quality","supplier","training"]

    print(tables)

    # Create a dropdown Menu
    drop = tk.OptionMenu(searchconsole, menu, *tables, command=lambda x: create_add_edit_delete_label(menu,
                                                                                                    authuserWindow))
    drop.grid(column=1, row=1, padx=5, pady=5)
    searchbutton = ttk.Button(authuserWindow, text="Search",
                              command=search_window)
    searchbutton.grid(column=0, row=5)


    print(str(menu.get()))

    authuserWindow.mainloop()
